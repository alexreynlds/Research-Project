// This middleware prevents unauthorized access to parts of the program
//
// If the user is not logged in, they cannot access anything but the login page.
//
// If the user is not an admin, they cannot access the admin dahhboard.
import { NextRequest, NextResponse } from "next/server";
import { jwtVerify } from "jose";

const ISSUER = "agrids";

// Helper function to verify the JWT to get the payload
async function verifyJWT(token: string) {
  const secret = new TextEncoder().encode(process.env.JWT_SECRET);
  const { payload } = await jwtVerify(token, secret, {
    issuer: ISSUER,
    clockTolerance: 5,
  });
  return payload as {
    sub?: string;
    typ?: string;
    role?: string;
    [k: string]: unknown;
  };
}

export async function middleware(req: NextRequest) {
  const { pathname, search, origin } = req.nextUrl;

  // Get the JWT token from cookies
  const token = req.cookies.get("session")?.value;
  // If no cookie, direct to login as they are not logged in
  if (!token) {
    const url = new URL("/login", origin);
    url.searchParams.set("next", pathname + (search || ""));
    return NextResponse.redirect(url);
  }

  // Verify the JWT token
  let payload;
  try {
    payload = await verifyJWT(token);
    console.log("JWT payload:", payload);
  } catch {
    const url = new URL("/login", origin);
    url.searchParams.set("next", pathname + (search || ""));
    return NextResponse.redirect(url);
  }

  // If the token is valid but not an access token, redirect to login
  if (payload.typ !== "access") {
    const url = new URL("/login", origin);
    url.searchParams.set("next", pathname + (search || ""));
    return NextResponse.redirect(url);
  }

  // If the role is not admin and trying to access admin routes, redirect to dashboard
  if (pathname.startsWith("/admin")) {
    const role = payload.role ?? payload.account_type;
    if (role !== "admin") {
      const url = new URL("/dashboard", origin);
      url.searchParams.set("err", "forbidden");
      return NextResponse.redirect(url);
    }
  }

  return NextResponse.next();
}

// Only apply this middleware to specific paths
export const config = {
  matcher: ["/dashboard/:path*", "/admin/:path*"],
};
